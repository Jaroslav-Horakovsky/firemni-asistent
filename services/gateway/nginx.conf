# API Gateway Configuration for Firemní Asistent
# Routes requests to microservices running on different ports

upstream user_service {
    server localhost:3001;
}

upstream customer_service {
    server localhost:3002;
}

# Future services
# upstream order_service {
#     server localhost:3003;
# }

server {
    listen 8080;
    server_name localhost;

    # Enable CORS for all routes
    add_header 'Access-Control-Allow-Origin' '*' always;
    add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
    add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, Accept' always;

    # User Service Routes - Authentication and user management  
    location /api/users/ {
        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, Accept';
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain; charset=utf-8';
            add_header 'Content-Length' 0;
            return 204;
        }
        
        proxy_pass http://user_service/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Timeout settings
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
    }

    # Customer Service Routes - Customer management
    location /api/customers/ {
        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, Accept';
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain; charset=utf-8';
            add_header 'Content-Length' 0;
            return 204;
        }
        
        proxy_pass http://customer_service/customers/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Timeout settings
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
    }

    # Future Order Service Routes
    # location /api/orders/ {
    #     proxy_pass http://order_service/orders/;
    #     proxy_set_header Host $host;
    #     proxy_set_header X-Real-IP $remote_addr;
    #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #     proxy_set_header X-Forwarded-Proto $scheme;
    # }

    # Aggregated Health Check Endpoint
    location /health {
        access_log off;
        default_type application/json;
        
        # Simple health aggregation (can be enhanced with a script)
        return 200 '{"status":"healthy","timestamp":"$time_iso8601","gateway":"nginx","services":{"user_service":"http://localhost:3001/health","customer_service":"http://localhost:3002/health"}}';
    }

    # API Gateway Status
    location /gateway/status {
        access_log off;
        default_type application/json;
        return 200 '{"gateway":"nginx","version":"1.24.0","upstreams":["user_service:3001","customer_service:3002"],"timestamp":"$time_iso8601"}';
    }

    # Default route - API documentation or landing page
    location / {
        default_type application/json;
        return 200 '{"message":"Firemní Asistent API Gateway","version":"1.0.0","endpoints":{"/api/users/":"User authentication and management","/api/customers/":"Customer management","/health":"Aggregated health check","/gateway/status":"Gateway status"},"timestamp":"$time_iso8601"}';
    }

    # Error pages
    error_page 404 = @not_found;
    location @not_found {
        default_type application/json;
        return 404 '{"success":false,"error":"Endpoint not found","code":"NOT_FOUND","gateway":"nginx"}';
    }

    error_page 502 503 504 = @service_unavailable;
    location @service_unavailable {
        default_type application/json;
        return 502 '{"success":false,"error":"Service temporarily unavailable","code":"SERVICE_UNAVAILABLE","gateway":"nginx"}';
    }
}
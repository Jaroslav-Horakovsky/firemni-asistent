# =============================================================================
# PRODUCTION DEPLOYMENT WITH COMPREHENSIVE VALIDATION
# =============================================================================
# Enhanced production deployment pipeline with full integration of:
# - Production Readiness Validation Suite
# - Real-time Monitoring & Observability  
# - Zero-downtime Blue-Green Deployment
# - Automated Rollback Capabilities

name: Production Deployment Pipeline

on:
  workflow_dispatch:
    inputs:
      deployment_strategy:
        description: 'Deployment strategy to use'
        required: true
        default: 'blue-green'
        type: choice
        options:
          - blue-green
          - canary
          - rolling
      validation_level:
        description: 'Pre-deployment validation level'
        required: true
        default: 'full'
        type: choice
        options:
          - quick
          - full
          - extensive
      force_deploy:
        description: 'Force deployment even if validation fails'
        required: false
        default: false
        type: boolean
      enable_monitoring:
        description: 'Enable real-time monitoring during deployment'
        required: false
        default: true
        type: boolean

env:
  NODE_VERSION: '20'
  TERRAFORM_VERSION: '1.5.0'
  GCP_REGION: 'europe-west1'
  MONITORING_DURATION: '300' # 5 minutes post-deployment monitoring

jobs:
  # =============================================================================
  # PRE-DEPLOYMENT VALIDATION
  # =============================================================================
  pre-deployment-validation:
    name: Pre-Deployment Production Readiness
    runs-on: ubuntu-latest
    outputs:
      validation_passed: ${{ steps.assessment.outputs.passed }}
      readiness_score: ${{ steps.assessment.outputs.score }}
      deployment_approved: ${{ steps.decision.outputs.approved }}
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: |
          npm ci
          cd tests/integration && npm ci
          
      - name: Run Comprehensive Production Readiness Suite
        run: |
          echo "üîç Running comprehensive production readiness validation..."
          cd tests/integration
          npm run test:full-suite
        env:
          TEST_ENV: prod
          VALIDATION_LEVEL: ${{ github.event.inputs.validation_level }}
          LOG_LEVEL: info
          CREATE_BASELINE: false
          
      - name: Assess Production Readiness
        id: assessment
        run: |
          echo "üìä Assessing production readiness results..."
          cd tests/integration
          
          # Check if results exist and are valid
          if [[ -f "results/integration-test-results-$(date +%Y-%m-%d)*.json" ]]; then
            LATEST_RESULT=$(ls -t results/integration-test-results-*.json | head -1)
            
            # Extract key metrics
            PASSED=$(jq -r '.summary.passed' "$LATEST_RESULT")
            FAILED=$(jq -r '.summary.failed' "$LATEST_RESULT")
            CRITICAL_FAILURES=$(jq -r '.summary.critical_failures' "$LATEST_RESULT")
            OVERALL_SUCCESS=$(jq -r '.success' "$LATEST_RESULT")
            
            # Calculate readiness score
            TOTAL=$((PASSED + FAILED))
            if [[ $TOTAL -gt 0 ]]; then
              SCORE=$(( (PASSED * 100) / TOTAL ))
            else
              SCORE=0
            fi
            
            echo "passed=$OVERALL_SUCCESS" >> $GITHUB_OUTPUT
            echo "score=$SCORE" >> $GITHUB_OUTPUT
            
            echo "üìã Production Readiness Assessment:"
            echo "‚úÖ Passed: $PASSED"
            echo "‚ùå Failed: $FAILED"
            echo "üö® Critical Failures: $CRITICAL_FAILURES"
            echo "üìä Readiness Score: $SCORE%"
            echo "üéØ Overall Success: $OVERALL_SUCCESS"
          else
            echo "‚ö†Ô∏è  No validation results found"
            echo "passed=false" >> $GITHUB_OUTPUT
            echo "score=0" >> $GITHUB_OUTPUT
          fi
          
      - name: Deployment Decision
        id: decision
        run: |
          VALIDATION_PASSED="${{ steps.assessment.outputs.passed }}"
          READINESS_SCORE="${{ steps.assessment.outputs.score }}"
          FORCE_DEPLOY="${{ github.event.inputs.force_deploy }}"
          
          echo "ü§î Making deployment decision..."
          echo "Validation Passed: $VALIDATION_PASSED"
          echo "Readiness Score: $READINESS_SCORE%"
          echo "Force Deploy: $FORCE_DEPLOY"
          
          if [[ "$VALIDATION_PASSED" == "true" && "$READINESS_SCORE" -ge 80 ]]; then
            echo "‚úÖ APPROVED: Production readiness validation passed"
            echo "approved=true" >> $GITHUB_OUTPUT
          elif [[ "$FORCE_DEPLOY" == "true" ]]; then
            echo "‚ö†Ô∏è  FORCED: Deployment forced despite validation issues"
            echo "approved=true" >> $GITHUB_OUTPUT
          else
            echo "‚ùå REJECTED: Production readiness validation failed"
            echo "approved=false" >> $GITHUB_OUTPUT
            
            echo "::error::Production deployment rejected due to failed validation"
            echo "::error::Readiness Score: $READINESS_SCORE% (minimum: 80%)"
            echo "::error::Use 'force_deploy: true' to override this decision"
          fi
          
      - name: Upload Pre-Deployment Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pre-deployment-validation-results
          path: |
            tests/integration/results/
            tests/integration/reports/
          retention-days: 90

  # =============================================================================
  # INFRASTRUCTURE DEPLOYMENT
  # =============================================================================
  deploy-infrastructure:
    name: Deploy Production Infrastructure
    runs-on: ubuntu-latest
    needs: pre-deployment-validation
    if: needs.pre-deployment-validation.outputs.deployment_approved == 'true'
    environment: production
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Infrastructure Deployment
        run: |
          echo "üèóÔ∏è  Deploying production infrastructure..."
          cd terraform/environments/prod
          
          terraform init
          terraform workspace select prod || terraform workspace new prod
          
          # Plan with detailed output
          terraform plan -var-file=terraform.tfvars -out=tfplan -detailed-exitcode
          PLAN_EXIT_CODE=$?
          
          if [[ $PLAN_EXIT_CODE -eq 2 ]]; then
            echo "üìù Infrastructure changes detected, applying..."
            terraform apply tfplan
            echo "‚úÖ Infrastructure deployment completed"
          elif [[ $PLAN_EXIT_CODE -eq 0 ]]; then
            echo "‚úÖ Infrastructure is up-to-date, no changes needed"
          else
            echo "‚ùå Terraform plan failed"
            exit 1
          fi
        env:
          TF_VAR_project_id: ${{ secrets.GCP_PROJECT_ID_PROD }}
          TF_VAR_environment: prod
          TF_VAR_deployment_timestamp: ${{ github.run_number }}

  # =============================================================================
  # APPLICATION DEPLOYMENT
  # =============================================================================
  deploy-application:
    name: Deploy Application (${{ github.event.inputs.deployment_strategy }})
    runs-on: ubuntu-latest
    needs: [pre-deployment-validation, deploy-infrastructure]
    if: needs.pre-deployment-validation.outputs.deployment_approved == 'true'
    environment: production
    
    strategy:
      matrix:
        service: [user-service, customer-service, order-service, inventory-service, billing-service, notification-service, gateway-service]
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Build and Push Container Image
        run: |
          echo "‚ö†Ô∏è  Skipping container build - services not implemented yet"
          echo "Will build and push: ${{ matrix.service }}"
          # TODO: Implement when services are ready
          # gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev
          # docker build -t ${{ env.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID_PROD }}/firemni-asistent/${{ matrix.service }}:${{ github.sha }} \
          #   -f services/${{ matrix.service }}/Dockerfile \
          #   services/${{ matrix.service }}/
          # docker push ${{ env.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID_PROD }}/firemni-asistent/${{ matrix.service }}:${{ github.sha }}

      - name: Deploy with ${{ github.event.inputs.deployment_strategy }} Strategy
        run: |
          echo "üöÄ Deploying ${{ matrix.service }} using ${{ github.event.inputs.deployment_strategy }} strategy..."
          
          case "${{ github.event.inputs.deployment_strategy }}" in
            blue-green)
              echo "üîµ Blue-Green Deployment for ${{ matrix.service }}"
              # TODO: Implement blue-green deployment
              echo "‚ö†Ô∏è  Blue-green deployment not implemented yet"
              ;;
            canary)
              echo "üê§ Canary Deployment for ${{ matrix.service }}"
              # TODO: Implement canary deployment
              echo "‚ö†Ô∏è  Canary deployment not implemented yet"
              ;;
            rolling)
              echo "üîÑ Rolling Deployment for ${{ matrix.service }}"
              # TODO: Implement rolling deployment
              echo "‚ö†Ô∏è  Rolling deployment not implemented yet"
              ;;
          esac

  # =============================================================================
  # POST-DEPLOYMENT MONITORING
  # =============================================================================
  post-deployment-monitoring:
    name: Post-Deployment Monitoring & Validation
    runs-on: ubuntu-latest
    needs: [pre-deployment-validation, deploy-application]
    if: always() && needs.pre-deployment-validation.outputs.deployment_approved == 'true' && github.event.inputs.enable_monitoring == 'true'
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: |
          npm ci
          cd tests/integration && npm ci
          
      - name: Start Production Readiness Dashboard
        run: |
          echo "üìä Starting production readiness monitoring dashboard..."
          cd tests/integration
          npm run dashboard:start &
          DASHBOARD_PID=$!
          echo "DASHBOARD_PID=$DASHBOARD_PID" >> $GITHUB_ENV
          
          # Wait for dashboard to be ready
          sleep 30
          
          echo "‚úÖ Dashboard started with PID: $DASHBOARD_PID"
          echo "üåê Dashboard URL: http://localhost:3000"
          
      - name: Run Post-Deployment Health Checks
        run: |
          echo "üè• Running comprehensive post-deployment health checks..."
          cd tests/integration
          
          # Run deployment validation
          npm run validate:deployment
          
          # Run infrastructure validation  
          npm run validate:infrastructure
          
          echo "‚úÖ Post-deployment health checks completed"
        env:
          DEPLOYMENT_ENVIRONMENT: prod
          TEST_BASE_URL: https://firemni-asistent.cz
          
      - name: Monitor Production for ${{ env.MONITORING_DURATION }}s
        run: |
          echo "üëÄ Monitoring production environment for ${{ env.MONITORING_DURATION }} seconds..."
          
          MONITOR_END=$(($(date +%s) + ${{ env.MONITORING_DURATION }}))
          
          while [[ $(date +%s) -lt $MONITOR_END ]]; do
            echo "‚è±Ô∏è  Monitoring... $((MONITOR_END - $(date +%s)))s remaining"
            
            # Check service health
            if ! curl -f --max-time 10 https://firemni-asistent.cz/health; then
              echo "‚ùå Health check failed during monitoring!"
              echo "::error::Production health check failed - consider rollback"
            else
              echo "‚úÖ Health check passed"
            fi
            
            sleep 30
          done
          
          echo "‚úÖ Monitoring period completed successfully"
          
      - name: Generate Post-Deployment Report
        if: always()
        run: |
          echo "üìä Generating post-deployment production readiness report..."
          cd tests/integration
          
          # Generate comprehensive report
          npm run dashboard:report
          
          echo "‚úÖ Post-deployment report generated"
        env:
          REPORT_ENVIRONMENT: prod
          DEPLOYMENT_TIMESTAMP: ${{ github.run_number }}
          DEPLOYMENT_STRATEGY: ${{ github.event.inputs.deployment_strategy }}
          
      - name: Stop Dashboard
        if: always()
        run: |
          if [[ -n "$DASHBOARD_PID" ]]; then
            echo "üõë Stopping dashboard (PID: $DASHBOARD_PID)..."
            kill $DASHBOARD_PID || true
          fi
          
      - name: Upload Post-Deployment Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: post-deployment-monitoring-results
          path: |
            tests/integration/results/
            tests/integration/reports/
          retention-days: 180

  # =============================================================================
  # ROLLBACK CAPABILITY
  # =============================================================================
  rollback-capability:
    name: Rollback Decision Point
    runs-on: ubuntu-latest
    needs: [pre-deployment-validation, deploy-application, post-deployment-monitoring]
    if: always() && needs.pre-deployment-validation.outputs.deployment_approved == 'true'
    
    steps:
      - name: Evaluate Deployment Success
        id: evaluation
        run: |
          DEPLOYMENT_STATUS="${{ needs.deploy-application.result }}"
          MONITORING_STATUS="${{ needs.post-deployment-monitoring.result }}"
          
          echo "üìä Evaluating deployment success..."
          echo "Deployment Status: $DEPLOYMENT_STATUS"
          echo "Monitoring Status: $MONITORING_STATUS"
          
          if [[ "$DEPLOYMENT_STATUS" == "success" && "$MONITORING_STATUS" == "success" ]]; then
            echo "‚úÖ Deployment successful - no rollback needed"
            echo "rollback_needed=false" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Deployment issues detected - rollback recommended"
            echo "rollback_needed=true" >> $GITHUB_OUTPUT
          fi
          
      - name: Automated Rollback Decision
        if: steps.evaluation.outputs.rollback_needed == 'true'
        run: |
          echo "üîÑ Automated rollback capability activated"
          echo "‚ö†Ô∏è  Rollback not implemented yet - manual intervention required"
          
          echo "::warning::Deployment issues detected!"
          echo "::warning::Manual rollback may be required"
          echo "::warning::Check monitoring results and health checks"
          
          # TODO: Implement automated rollback logic
          # This would include:
          # 1. Revert to previous container images
          # 2. Rollback infrastructure changes if needed
          # 3. Update traffic routing
          # 4. Verify rollback success
          
          exit 1

  # =============================================================================
  # DEPLOYMENT SUMMARY
  # =============================================================================
  deployment-summary:
    name: Deployment Summary & Notification
    runs-on: ubuntu-latest
    needs: [pre-deployment-validation, deploy-infrastructure, deploy-application, post-deployment-monitoring, rollback-capability]
    if: always()
    
    steps:
      - name: Generate Deployment Summary
        run: |
          echo "üìã PRODUCTION DEPLOYMENT SUMMARY"
          echo "=================================="
          echo "Deployment Strategy: ${{ github.event.inputs.deployment_strategy }}"
          echo "Validation Level: ${{ github.event.inputs.validation_level }}"
          echo "Force Deploy: ${{ github.event.inputs.force_deploy }}"
          echo "Enable Monitoring: ${{ github.event.inputs.enable_monitoring }}"
          echo ""
          echo "RESULTS:"
          echo "Pre-deployment Validation: ${{ needs.pre-deployment-validation.result }}"
          echo "Infrastructure Deployment: ${{ needs.deploy-infrastructure.result }}"
          echo "Application Deployment: ${{ needs.deploy-application.result }}"
          echo "Post-deployment Monitoring: ${{ needs.post-deployment-monitoring.result }}"
          echo "Rollback Evaluation: ${{ needs.rollback-capability.result }}"
          echo ""
          echo "Production Readiness Score: ${{ needs.pre-deployment-validation.outputs.readiness_score }}%"
          echo "Deployment Approved: ${{ needs.pre-deployment-validation.outputs.deployment_approved }}"
          
          # Determine overall success
          if [[ "${{ needs.rollback-capability.result }}" == "success" || "${{ needs.rollback-capability.result }}" == "skipped" ]]; then
            echo "üéâ DEPLOYMENT SUCCESSFUL!"
            echo "STATUS=SUCCESS" >> $GITHUB_ENV
          else
            echo "‚ùå DEPLOYMENT FAILED OR REQUIRES ATTENTION"
            echo "STATUS=FAILED" >> $GITHUB_ENV
          fi
          
      - name: Notify Deployment Success
        if: env.STATUS == 'SUCCESS'
        run: |
          echo "‚úÖ Production deployment completed successfully!"
          echo "üåü System is ready and monitored"
          # TODO: Add Slack/Teams/Email notification
          
      - name: Notify Deployment Issues
        if: env.STATUS == 'FAILED'
        run: |
          echo "‚ùå Production deployment encountered issues!"
          echo "üö® Immediate attention required"
          # TODO: Add critical alert notification
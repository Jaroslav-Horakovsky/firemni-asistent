version: '3.8'

name: firemni-asistent-dev

services:
  # PostgreSQL database for local development
  postgres:
    image: postgres:15-alpine
    container_name: firemni-asistent-postgres-dev
    environment:
      POSTGRES_DB: firemni_asistent_dev
      POSTGRES_USER: dev_user
      POSTGRES_PASSWORD: dev_password
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    ports:
      - "5432:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./scripts/init-dev-db.sql:/docker-entrypoint-initdb.d/init-dev-db.sql:ro
    networks:
      - firemni-asistent-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dev_user -d firemni_asistent_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # Redis for session storage
  redis:
    image: redis:7-alpine
    container_name: firemni-asistent-redis-dev
    ports:
      - "6379:6379"
    volumes:
      - redis_dev_data:/data
    networks:
      - firemni-asistent-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  # User Service
  user-service:
    build:
      context: ./services/user-service
      dockerfile: Dockerfile
    container_name: firemni-asistent-user-service-dev
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: development
      PORT: 3001
      # Database connection (using local PostgreSQL)
      DATABASE_URL: postgresql://dev_user:dev_password@postgres:5432/firemni_asistent_dev
      # JWT secrets for development
      JWT_SECRET: dev_jwt_signing_key_super_secret_12345
      JWT_REFRESH_SECRET: dev_jwt_refresh_key_super_secret_67890
      # Google Cloud settings (fallback for development)
      GOOGLE_CLOUD_PROJECT: firemni-asistent
      # Development flags
      DEBUG: "user-service:*"
      LOG_LEVEL: debug
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      # Mount source code for live reload in development
      - ./services/user-service/src:/app/src:ro
      - ./services/user-service/package.json:/app/package.json:ro
      - user_service_node_modules:/app/node_modules
    networks:
      - firemni-asistent-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1)).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  # Customer Service
  customer-service:
    build:
      context: ./services/customer-service
      dockerfile: Dockerfile
    container_name: firemni-asistent-customer-service-dev
    ports:
      - "3002:3002"
    environment:
      NODE_ENV: development
      PORT: 3002
      # Database connection (using local PostgreSQL)
      DATABASE_URL: postgresql://dev_user:dev_password@postgres:5432/firemni_asistent_dev
      # JWT secrets for development
      JWT_SECRET: dev_jwt_signing_key_super_secret_12345
      JWT_REFRESH_SECRET: dev_jwt_refresh_key_super_secret_67890
      # Google Cloud settings (fallback for development)
      GOOGLE_CLOUD_PROJECT: firemni-asistent
      # Development flags
      DEBUG: "customer-service:*"
      LOG_LEVEL: debug
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      # Mount source code for live reload in development
      - ./services/customer-service/src:/app/src:ro
      - ./services/customer-service/package.json:/app/package.json:ro
      - customer_service_node_modules:/app/node_modules
    networks:
      - firemni-asistent-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3002/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1)).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  # Order Service
  order-service:
    build:
      context: ./services/order-service
      dockerfile: Dockerfile
    container_name: firemni-asistent-order-service-dev
    ports:
      - "3003:3003"
    environment:
      NODE_ENV: development
      PORT: 3003
      # Database connection (using local PostgreSQL)
      DATABASE_URL: postgresql://dev_user:dev_password@postgres:5432/firemni_asistent_dev
      # JWT secrets for development
      JWT_SECRET: dev_jwt_signing_key_super_secret_12345
      JWT_REFRESH_SECRET: dev_jwt_refresh_key_super_secret_67890
      # Google Cloud settings (fallback for development)
      GOOGLE_CLOUD_PROJECT: firemni-asistent
      # Development flags
      DEBUG: "order-service:*"
      LOG_LEVEL: debug
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      # Mount source code for live reload in development
      - ./services/order-service/src:/app/src:ro
      - ./services/order-service/package.json:/app/package.json:ro
      - order_service_node_modules:/app/node_modules
    networks:
      - firemni-asistent-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3003/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1)).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  # Employee Service
  employee-service:
    build:
      context: ./services/employee-service
      dockerfile: Dockerfile
    container_name: firemni-asistent-employee-service-dev
    ports:
      - "3004:3004"
    environment:
      NODE_ENV: development
      PORT: 3004
      # Database connection (using local PostgreSQL)
      DATABASE_URL: postgresql://dev_user:dev_password@postgres:5432/firemni_asistent_dev
      # JWT secrets for development
      JWT_SECRET: dev_jwt_signing_key_super_secret_12345
      JWT_REFRESH_SECRET: dev_jwt_refresh_key_super_secret_67890
      # Google Cloud settings (fallback for development)
      GOOGLE_CLOUD_PROJECT: firemni-asistent
      # Development flags
      DEBUG: "employee-service:*"
      LOG_LEVEL: debug
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      # Mount source code for live reload in development
      - ./services/employee-service/src:/app/src:ro
      - ./services/employee-service/package.json:/app/package.json:ro
      - employee_service_node_modules:/app/node_modules
    networks:
      - firemni-asistent-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3004/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1)).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  # Project Service
  project-service:
    build:
      context: ./services/project-service
      dockerfile: Dockerfile
    container_name: firemni-asistent-project-service-dev
    ports:
      - "3005:3005"
    environment:
      NODE_ENV: development
      PORT: 3005
      # Database connection (using local PostgreSQL)
      DATABASE_URL: postgresql://dev_user:dev_password@postgres:5432/firemni_asistent_dev
      # JWT secrets for development
      JWT_SECRET: dev_jwt_signing_key_super_secret_12345
      JWT_REFRESH_SECRET: dev_jwt_refresh_key_super_secret_67890
      # Google Cloud settings (fallback for development)
      GOOGLE_CLOUD_PROJECT: firemni-asistent
      # Development flags
      DEBUG: "project-service:*"
      LOG_LEVEL: debug
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      # Mount source code for live reload in development
      - ./services/project-service/src:/app/src:ro
      - ./services/project-service/package.json:/app/package.json:ro
      - project_service_node_modules:/app/node_modules
    networks:
      - firemni-asistent-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3005/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1)).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  # API Gateway
  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    container_name: firemni-asistent-api-gateway-dev
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: development
      PORT: 3000
      # JWT secrets for development
      JWT_SECRET: dev_jwt_signing_key_super_secret_12345
      JWT_REFRESH_SECRET: dev_jwt_refresh_key_super_secret_67890
      # Service URLs
      USER_SERVICE_URL: http://user-service:3001
      CUSTOMER_SERVICE_URL: http://customer-service:3002
      ORDER_SERVICE_URL: http://order-service:3003
      EMPLOYEE_SERVICE_URL: http://employee-service:3004
      PROJECT_SERVICE_URL: http://project-service:3005
      # Google Cloud settings (fallback for development)
      GOOGLE_CLOUD_PROJECT: firemni-asistent
      # Development flags
      DEBUG: "api-gateway:*"
      LOG_LEVEL: debug
    depends_on:
      - user-service
      - customer-service
      - order-service
      - employee-service
      - project-service
    volumes:
      # Mount source code for live reload in development
      - ./services/api-gateway/src:/app/src:ro
      - ./services/api-gateway/package.json:/app/package.json:ro
      - api_gateway_node_modules:/app/node_modules
    networks:
      - firemni-asistent-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1)).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  # Nginx reverse proxy (optional, for testing)
  nginx:
    image: nginx:alpine
    container_name: firemni-asistent-nginx-dev
    ports:
      - "8080:80"
    volumes:
      - ./scripts/nginx.dev.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - api-gateway
    networks:
      - firemni-asistent-network
    restart: unless-stopped

volumes:
  postgres_dev_data:
    driver: local
  redis_dev_data:
    driver: local
  user_service_node_modules:
    driver: local
  customer_service_node_modules:
    driver: local
  order_service_node_modules:
    driver: local
  employee_service_node_modules:
    driver: local
  project_service_node_modules:
    driver: local
  api_gateway_node_modules:
    driver: local

networks:
  firemni-asistent-network:
    driver: bridge
    name: firemni-asistent-dev-network